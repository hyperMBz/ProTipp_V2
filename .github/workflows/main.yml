name: 🚀 ProTipp V2 - Complete CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Egyidejű futtatás kezelése
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  BUN_VERSION: 'latest'
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

jobs:
  # 1. CODE QUALITY & TESTING
  quality:
    name: 🔍 Code Quality & Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: 📥 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🧹 Lint code
        run: bunx next lint --max-warnings 0 || echo "Linting completed with warnings"

      - name: 🔬 Type check
        run: bunx tsc --noEmit

      - name: 🧪 Run tests
        run: bun run test:run
        env:
          CI: true

  # 2. BUILD VERIFICATION
  build:
    name: 🏗️ Build Verification
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🏗️ Build application
        run: bun run build

      - name: 📂 Verify build output exists
        run: |
          echo "Repository root contents:" && ls -la
          echo "\n.next contents:" && ls -la .next || (echo ".next directory is missing" && exit 1)

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .next
          if-no-files-found: error
          include-hidden-files: true
          retention-days: 3

  # 3. DEPLOYMENT (csak main branch push esetén)
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://protipp.netlify.app
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🏗️ Build (Netlify)
        run: bun run build
        env:
          NODE_ENV: production

      - name: 📂 Verify build output before deploy
        run: |
          echo "Repository root contents:" && ls -la
          echo "\n.next contents:" && ls -la .next || (echo ".next directory is missing" && exit 1)

      - name: 🚀 Deploy to Netlify
        run: npx netlify deploy --dir=.next --prod --message "Deploy via GH Actions ${GITHUB_SHA}"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: ✅ Deployment Success
        if: success()
        run: |
          echo "🎉 Deployment successful!"
          echo "🌐 Live URL: https://protipp.netlify.app"

      - name: ❌ Deployment Failed
        if: failure()
        run: |
          echo "💥 Deployment failed!"
          exit 1

  # 4. NOTIFICATION
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [quality, build, deploy]
    if: always()
    steps:
      - name: 📢 Success Notification
        if: ${{ needs.deploy.result == 'success' }}
        run: |
          echo "✅ ProTipp V2 successfully deployed!"
          echo "🌐 https://protipp.netlify.app"

      - name: ⚠️ Failure Notification
        if: ${{ needs.deploy.result == 'failure' || needs.build.result == 'failure' || needs.quality.result == 'failure' }}
        run: |
          echo "❌ Pipeline failed - check logs"
          echo "🔍 Failed jobs: quality=${{ needs.quality.result }}, build=${{ needs.build.result }}, deploy=${{ needs.deploy.result }}"
