name: Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: bunx next lint --max-warnings 0 || echo "Linting completed with warnings"
      
    - name: Run unit tests
      run: npm run test:unit
      
    - name: Run integration tests
      run: npm run test:integration
      
    - name: Run coverage analysis
      run: npm run test:coverage
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/coverage-final.json
        flags: unittests
        name: codecov-umbrella
        
    - name: Run security tests
      run: npm run test:security
      
    - name: Build application
      run: npm run build
      
    - name: Run E2E tests
      run: npm run test:e2e
      
  performance:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Start application
      run: npm run start &
      
    - name: Wait for application to start
      run: sleep 30
      
    - name: Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: Run performance tests
      run: npm run test:performance
      env:
        BASE_URL: http://localhost:3000
        
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance-report.json
        
  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Run custom security tests
      run: npm run test:security
      
    - name: Upload security results
      uses: actions/upload-artifact@v4
      with:
        name: security-results
        path: security-report.json
        
  quality-gate:
    runs-on: ubuntu-latest
    needs: [test, performance, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        name: test-results
        
    - name: Download performance results
      uses: actions/download-artifact@v4
      with:
        name: performance-results
        
    - name: Download security results
      uses: actions/download-artifact@v4
      with:
        name: security-results
        
    - name: Quality Gate Check
      run: |
        echo "Checking quality gates..."
        
        # Check test coverage (should be > 80%)
        if [ -f "coverage/coverage-summary.json" ]; then
          COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "❌ Coverage below 80% threshold"
            exit 1
          fi
        fi
        
        # Check performance thresholds
        if [ -f "performance-report.json" ]; then
          AVG_RESPONSE=$(cat performance-report.json | jq -r '.summary.avg_response_time')
          echo "Average response time: ${AVG_RESPONSE}ms"
          if [ "$AVG_RESPONSE" -gt 500 ]; then
            echo "❌ Average response time above 500ms threshold"
            exit 1
          fi
        fi
        
        # Check security vulnerabilities
        if [ -f "security-report.json" ]; then
          CRITICAL_VULNS=$(cat security-report.json | jq -r '.summary.critical_vulnerabilities')
          echo "Critical vulnerabilities: $CRITICAL_VULNS"
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "❌ Critical vulnerabilities found"
            exit 1
          fi
        fi
        
        echo "✅ All quality gates passed"
        
    - name: Create test summary
      run: |
        echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Coverage" >> $GITHUB_STEP_SUMMARY
        if [ -f "coverage/coverage-summary.json" ]; then
          COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
          echo "- **Overall Coverage**: $COVERAGE%" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Performance" >> $GITHUB_STEP_SUMMARY
        if [ -f "performance-report.json" ]; then
          AVG_RESPONSE=$(cat performance-report.json | jq -r '.summary.avg_response_time')
          echo "- **Average Response Time**: ${AVG_RESPONSE}ms" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Security" >> $GITHUB_STEP_SUMMARY
        if [ -f "security-report.json" ]; then
          CRITICAL_VULNS=$(cat security-report.json | jq -r '.summary.critical_vulnerabilities')
          HIGH_VULNS=$(cat security-report.json | jq -r '.summary.high_vulnerabilities')
          echo "- **Critical Vulnerabilities**: $CRITICAL_VULNS" >> $GITHUB_STEP_SUMMARY
          echo "- **High Vulnerabilities**: $HIGH_VULNS" >> $GITHUB_STEP_SUMMARY
        fi
